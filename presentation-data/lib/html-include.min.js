//!function(a){"use strict";function b(b,c){var d=new XMLHttpRequest;(b.preventCache||null!==b.getAttribute("prevent-cache"))&&(c+=(/\?/.test(c)?"&":"?")+(new Date).getTime()),d.open("GET",c,!0),d.onreadystatechange=function(){var c,e,f;4===d.readyState&&(c=d.responseText||"",null!==b.parentNode?b.outerHTML=c:b.content=c,e=new DOMParser,f=e.parseFromString(c,"text/xml"),Array.prototype.forEach.call(f.querySelectorAll("script"),function(b){var c,d=b.getAttribute("src");a.addEventListener("beforeLoad",function(){d&&(c=document.createElement("script"),c.setAttribute("src",d),document.querySelector("head").appendChild(c)),d||eval.call(null,b.innerHTML)})}))},d.send()}var c;!function(){var b,c,d=new Event("DOMContentLoaded"),e=new Event("load"),f=new Event("beforeLoad"),g=!1;b=function(a){a.stopImmediatePropagation(),g=!0},c=function(h){h.stopImmediatePropagation();var i=setInterval(function(){0===document.body.querySelectorAll("html-include[src]").length&&(clearInterval(i),document.removeEventListener("DOMContentLoaded",c,!0),a.removeEventListener("load",b,!0),a.dispatchEvent(f),document.dispatchEvent(d),g&&a.dispatchEvent(e))},1)},a.addEventListener("load",b,!0),document.addEventListener("DOMContentLoaded",c,!0)}(),c=Object.create(a.HTMLElement.prototype),c.attributeChangedCallback=function(a,b,c){"src"===a&&(this.src=c)},c.attachedCallback=function(){this.content&&(this.outerHTML=this.content)},c.createdCallback=function(){var a,c=this;return(a=this.src||this.getAttribute("src")||!1)?void b(this,a):void Object.defineProperty(this,"src",{set:function(a){b(c,a)},get:function(){return c.getAttribute("src")||""}})},document.registerElement("html-include",{prototype:c})}(this);
/*jslint browser: true, indent: 2, evil: true*/
/*global Event, DOMParser*/

(function (window) {
  'use strict';
  var proto;


  /**
   * Prevent the regular DOMContentLoaded event from bubbling,
   * and instead, manually emit a DOMContentLoaded event once
   * there are no more * html-include elements with a src attribute.
   */
  (function () {
    var CustomDOMContentLoaded = new Event('DOMContentLoaded'),
      CustomWindowLoad = new Event('load'),
      beforeLoad = new Event('beforeLoad'),
      windowEmitted = false,
      windowListener,
      listener;

    windowListener = function (e) {
      e.stopImmediatePropagation();
      windowEmitted = true;
    };
    listener = function (e) {
      e.stopImmediatePropagation();
      var inter = setInterval(function () {
        if (document.body.querySelectorAll('html-include[src]').length === 0) {
          clearInterval(inter);
          document.removeEventListener('DOMContentLoaded', listener, true);
          window.removeEventListener('load', windowListener, true);
          window.dispatchEvent(beforeLoad);
          document.dispatchEvent(CustomDOMContentLoaded);
          if (windowEmitted) {
            window.dispatchEvent(CustomWindowLoad);
          }
        }
      }, 1);
    };
    window.addEventListener('load', windowListener, true);
    document.addEventListener('DOMContentLoaded', listener, true);
  }());


  function xhr(that, uri) {
    var r = new XMLHttpRequest();

    if (that.preventCache || that.getAttribute('prevent-cache') !== null) {
      uri += (/\?/.test(uri) ? '&' : '?') + (new Date().getTime());
    }
    r.open("GET", uri, true);

    r.onreadystatechange = function () {
      var response, parser, doc;
      if (r.readyState !== 4) {
        return;
      }
      response = r.responseText || '';

      // It is already attached?
      if (that.parentNode !== null) {
        that.outerHTML = response;
      } else {
        //It is not, save the content.
        that.content = response;
      }

      parser = new DOMParser();
      doc = parser.parseFromString(response, "text/xml");
      Array.prototype.forEach.call(doc.querySelectorAll('script'), function (script) {
        var src = script.getAttribute('src'), ele;
        window.addEventListener('beforeLoad', function () {
          if (src) {
            ele = document.createElement('script');
            ele.setAttribute('src', src);
            document.querySelector('head').appendChild(ele);
          }
          if (!src) {
            eval.call(null, script.innerHTML);
          }
        });
      });
    };
    r.send();
  }

  proto = Object.create(window.HTMLElement.prototype);

  /*jslint unparam:true*/
  proto.attributeChangedCallback = function (attr, oldVal, newVal) {
    if (attr === 'src') {
      this.src = newVal;
    }
  };
  /*jslint unparam:false*/

  proto.attachedCallback = function () {
    // If it already has content, just replace it.
    if (this.content) {
      this.outerHTML = this.content;
    }
  };

  proto.createdCallback = function () {
    var that = this, src;
    src = this.src || this.getAttribute('src') || false;

    if (src) {
      xhr(this, src);
      return;
    }
    Object.defineProperty(this, 'src', {
      set : function (val) {
        xhr(that, val);
      },
      get : function () {
        return that.getAttribute('src') || '';
      }
    });
  };
  document.registerElement('html-include', {
    prototype : proto
  });
}(this));
